---
- hosts: all
  vars:
    satellite:
      method: https
      fqdn: centos7-katello-nightly.sean.example.com
      user: admin
      password: changeme
      verify_certs: no
    satellite_org_id: 1
    content_view_prefix: test
    promote_to_lifecycle_env:
      - Library
      - test
  tasks:
    - name: Get Content Views
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/katello/api/content_views"
        method: GET
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
      register: content_views
      run_once: true
      delegate_to: localhost

    - name: Set sorted_content_views 
      set_fact:
        sorted_content_views: "{{ content_views.json.results | sort(attribute='created_at', reverse=True) | selectattr('name', 'match', '^' + content_view_prefix ) | list }}"
      delegate_to: localhost
      changed_when: false

    - name: Copy Content View
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/katello/api/content_views"
        method: POST
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
        body_format: json
        body:
          organization_id: "{{ sorted_content_views[0].organization_id }}"
          id: "{{ sorted_content_views[0].id }}"
          name: "{{ content_view_prefix }}-{{ lookup('pipe','date \"+%Y%m%d-%H%M\"') }}"
        headers:
          Content-Type: "application/json"
          Accept: "application/json,version=2"
      run_once: true
      delegate_to: localhost
      register: new_content_view

    - name: Publish Content View
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/katello/api/content_views/{{ new_content_view.json.id }}/publish"
        method: POST
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
        status_code: 200,202
        body_format: json
        body:
          organization_id: "{{ new_content_view.json.organization_id }}"
          id: "{{ new_content_view.json.id }}"
          description: Automatically Generated by Ansible
        headers:
          Content-Type: "application/json"
          Accept: "application/json,version=2"
      run_once: true
      delegate_to: localhost
      register: new_content_view_publish

    - name: Check Content View publish task status
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/foreman_tasks/api/tasks/{{ new_content_view_publish.json.id }}"
        method: GET
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
      changed_when: false
      register: new_content_view_publish_task_status
      until: new_content_view_publish_task_status.json.state == "stopped"
      retries: 40
      delay: 5

    - name: Exit if Content View publish failed
      fail:
        msg: "Publishing Content Views failed... See {{ satellite.method }}://{{ satellite.fqdn }}/foreman_tasks/tasks/{{ cv_move_task.results[0].json.id }}"
      when: new_content_view_publish_task_status.json.result != "success"

    - name: Get Content View Versions
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/katello/api/content_view_versions"
        method: GET
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
        body_format: json
        body:
          organization_id: "{{ new_content_view.json.organization_id }}"
          content_view_id: "{{ new_content_view.json.id }}"
        headers:
          Content-Type: "application/json"
          Accept: "application/json,version=2"
      register: content_view_versions
      run_once: true
      delegate_to: localhost

    - name: Get LifeCycle Environments
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/katello/api/environments"
        method: GET
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
        body_format: json
        body:
          organization_id: "{{ new_content_view.json.organization_id }}"
          full_result: true
        headers:
          Content-Type: "application/json"
          Accept: "application/json,version=2"
      register: lifecycle_environments
      run_once: true
      delegate_to: localhost

    - name: Set LifeCycle Environment IDs
      set_fact:
        lifecycle_environment_ids: "{{ ( lifecycle_environment_ids | default([]) ) + [item.id] }}"
      when: item.label in ( promote_to_lifecycle_env | difference(['Library']) )
      with_items:
        - "{{ lifecycle_environments.json.results }}"
      delegate_to: localhost
      changed_when: false

    - name: Promote Content View
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/katello/api/content_view_versions/{{ content_view_versions.json.results[0].id }}/promote"
        method: POST
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
        status_code: 200,202
        body_format: json
        body:
          organization_id: "{{ new_content_view.json.organization_id }}"
          id: "{{ content_view_versions.json.results[0].id }}"
          environment_ids: "{{ lifecycle_environment_ids }}" 
          force: true
        headers:
          Content-Type: "application/json"
          Accept: "application/json,version=2"
      run_once: true
      delegate_to: localhost
      register: new_content_view_promote
      when:
        - lifecycle_environment_ids is defined
        - lifecycle_environment_ids > 0

    - name: Check Content View promote task status
      uri:
        url: "{{ satellite.method }}://{{ satellite.fqdn }}/foreman_tasks/api/tasks/{{ new_content_view_promote.json.id }}"
        method: GET
        user: "{{ satellite.user }}"
        password: "{{ satellite.password }}"
        force_basic_auth: yes
        validate_certs: "{{ satellite.verify_certs }}"
      changed_when: false
      register: new_content_view_promote_task_status
      until: new_content_view_promote_task_status.json.state == "stopped"
      retries: 40
      delay: 5
      when: not new_content_view_promote.skipped | default(False)

    - name: Exit if Content View promote failed
      fail:
        msg: "Publishing Content Views failed... See {{ satellite.method }}://{{ satellite.fqdn }}/foreman_tasks/tasks/{{ cv_move_task.results[0].json.id }}"
      when:
        - not new_content_view_promote.skipped | default(False)
        - new_content_view_promote_task_status.json.result != "success"
